// <auto-generated />
using System;
using IHunger.Services.Restaurants.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IHunger.Services.Restaurants.Infrastructure.Migrations
{
    [DbContext(typeof(RestaurantDbContext))]
    partial class RestaurantDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IHunger.Services.Restaurants.Core.Entities.AddressRestaurant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(80)");

                    b.Property<string>("County")
                        .IsRequired()
                        .HasColumnType("varchar(80)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("varchar(80)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.ToTable("AddressRestaurants", "public");
                });

            modelBuilder.Entity("IHunger.Services.Restaurants.Core.Entities.CategoryRestaurant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("CategoryRestaurants", "public");
                });

            modelBuilder.Entity("IHunger.Services.Restaurants.Core.Entities.Restaurant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<Guid>("IdAddressRestaurant")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdCategoryRestaurant")
                        .HasColumnType("uuid");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("varchar(10000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("IdAddressRestaurant");

                    b.HasIndex("IdCategoryRestaurant");

                    b.ToTable("Restaurants", "public");
                });

            modelBuilder.Entity("IHunger.Services.Restaurants.Core.Entities.RestaurantComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("IdComment")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdRestaurant")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("IdRestaurant");

                    b.ToTable("RestaurantComments", "public");
                });

            modelBuilder.Entity("IHunger.Services.Restaurants.Core.Entities.RestaurantProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("IdProduct")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdRestaurant")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("IdRestaurant");

                    b.ToTable("RestaurantProducts", "public");
                });

            modelBuilder.Entity("IHunger.Services.Restaurants.Core.Entities.Restaurant", b =>
                {
                    b.HasOne("IHunger.Services.Restaurants.Core.Entities.AddressRestaurant", "AddressRestaurant")
                        .WithMany()
                        .HasForeignKey("IdAddressRestaurant")
                        .IsRequired();

                    b.HasOne("IHunger.Services.Restaurants.Core.Entities.CategoryRestaurant", "CategoryRestaurant")
                        .WithMany()
                        .HasForeignKey("IdCategoryRestaurant")
                        .IsRequired();

                    b.Navigation("AddressRestaurant");

                    b.Navigation("CategoryRestaurant");
                });

            modelBuilder.Entity("IHunger.Services.Restaurants.Core.Entities.RestaurantComment", b =>
                {
                    b.HasOne("IHunger.Services.Restaurants.Core.Entities.Restaurant", "Restaurant")
                        .WithMany("Comments")
                        .HasForeignKey("IdRestaurant");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("IHunger.Services.Restaurants.Core.Entities.RestaurantProduct", b =>
                {
                    b.HasOne("IHunger.Services.Restaurants.Core.Entities.Restaurant", "Restaurant")
                        .WithMany("Products")
                        .HasForeignKey("IdRestaurant");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("IHunger.Services.Restaurants.Core.Entities.Restaurant", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
